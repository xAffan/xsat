# .github/workflows/release.yml
name: Auto Release on Push

on:
  push:
    branches:
      - main

env:
  PROJECT_NAME: xsat

jobs:
  build-android:
    name: Build Android
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17'
      - uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
      - run: flutter build apk --release
      - name: Rename APK
        run: mv build/app/outputs/flutter-apk/app-release.apk ${{ env.PROJECT_NAME }}-Android.apk
      - name: Upload Android Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: Android-Build
          path: ${{ env.PROJECT_NAME }}-Android.apk

  build-linux:
    name: Build Linux
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - uses: actions/checkout@v4
      - run: |
          sudo apt-get update
          sudo apt-get install -y \
            clang cmake ninja-build pkg-config libgtk-3-dev \
            libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev \
            libgstreamer-plugins-good1.0-dev libgstreamer-plugins-bad1.0-dev
      - uses: subosito/flutter-action@v2
      - run: flutter build linux --release
      - run: tar -czvf ${{ env.PROJECT_NAME }}-Linux.tar.gz -C build/linux/x64/release/bundle .
      - name: Upload Linux Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: Linux-Build
          path: ${{ env.PROJECT_NAME }}-Linux.tar.gz

  build-windows:
    name: Build Windows
    runs-on: windows-latest
    continue-on-error: true
    steps:
      - uses: actions/checkout@v4
      - uses: subosito/flutter-action@v2
      - run: flutter build windows --release
      - run: Compress-Archive -Path build/windows/x64/runner/Release -DestinationPath ${{ env.PROJECT_NAME }}-Windows.zip
      - name: Upload Windows Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: Windows-Build
          path: ${{ env.PROJECT_NAME }}-Windows.zip

  build-macos:
    name: Build macOS
    runs-on: macos-latest
    continue-on-error: true
    steps:
      - uses: actions/checkout@v4
      - uses: subosito/flutter-action@v2
      - run: flutter build macos --release
      - name: Create DMG
        run: |
          APP_PATH=$(find build/macos/Build/Products/Release -name "*.app" -type d | head -1)
          if [ -n "$APP_PATH" ]; then
            hdiutil create -fs HFS+ -srcfolder "$APP_PATH" -volname "${{ env.PROJECT_NAME }}" "${{ env.PROJECT_NAME }}-macOS.dmg"
          else
            echo "No .app bundle found"
            ls -la build/macos/Build/Products/Release/
            exit 1
          fi
      - name: Upload macOS Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: macOS-Build
          path: ${{ env.PROJECT_NAME }}-macOS.dmg

  build-ios:
    name: Build iOS
    runs-on: macos-latest
    continue-on-error: true
    steps:
      - uses: actions/checkout@v4
      - uses: subosito/flutter-action@v2

      # This command will always create the .xcarchive, and MIGHT create the .ipa.
      - name: Build and Attempt to Export IPA
        run: flutter build ipa --release --no-codesign

      - name: Create or Rename IPA
        run: |
          # Define the final path for our IPA
          FINAL_IPA_PATH="build/ios/ipa/${{ env.PROJECT_NAME }}-iOS.ipa"

          # Check if 'flutter build ipa' already created the IPA in the expected directory
          EXISTING_IPA_PATH=$(find build/ios/ipa -name "*.ipa" -type f | head -1)

          if [ -n "$EXISTING_IPA_PATH" ]; then
            # SUCCESS: The modern command worked. Just rename the file.
            echo "✅ 'flutter build ipa' successfully created the IPA. Renaming..."
            mv "$EXISTING_IPA_PATH" "$FINAL_IPA_PATH"
          else
            # FALLBACK: The modern command failed to export. Manually create the IPA.
            echo "⚠️ 'flutter build ipa' did not create an IPA. Falling back to manual creation..."
            
            # Find the archive created by the previous step
            ARCHIVE_PATH=$(find build/ios/archive -name "*.xcarchive" | head -1)
            
            if [ -z "$ARCHIVE_PATH" ]; then
              echo "❌ Critical error: No .xcarchive found to create an IPA from."
              exit 1
            fi

            # Manually package the .app into an .ipa
            PAYLOAD_DIR="build/ios/ipa/Payload"
            mkdir -p "$PAYLOAD_DIR"
            cp -r "$ARCHIVE_PATH/Products/Applications/Runner.app" "$PAYLOAD_DIR/"
            (cd build/ios/ipa && zip -r "${{ env.PROJECT_NAME }}-iOS.ipa" Payload)
          fi

      - name: Upload iOS Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: iOS-Build
          # The path is now guaranteed to be correct regardless of which method was used
          path: build/ios/ipa/${{ env.PROJECT_NAME }}-iOS.ipa
          if-no-files-found: warn

  create-and-publish-release:
    name: Create & Publish Release
    runs-on: ubuntu-latest
    needs: [build-android, build-linux, build-windows, build-macos, build-ios]
    if: success() || failure() # This ensures it runs even if some builds fail
    steps:
      - name: Generate Release Tag
        id: generate_tag
        run: echo "TAG=release-$(date +'%Y%m%d-%H%M')-${GITHUB_SHA::7}" >> $GITHUB_ENV

      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: List downloaded files for debugging
        run: ls -R artifacts

      - name: Create GitHub Release and Upload Assets
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.TAG }}
          name: "Auto Release ${{ env.TAG }}"
          body: |
            Automatic release generated from commit ${{ github.sha }}.

            **Note:** Some build files may be missing if their corresponding build job failed.
          files: artifacts/**/*
